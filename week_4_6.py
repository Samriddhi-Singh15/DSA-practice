# -*- coding: utf-8 -*-
"""Week 4-6

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U7kK9dl77awq3kPocv5KSqF1RJN0CRnw
"""

def merge(self, nums1, m, nums2, n):
        p1=m-1
        p2=n-1
        p=m+n-1
        while p1>=0 and p2>=0:
            if nums1[p1] > nums2[p2]:
                nums1[p]=nums1[p1]
                p1-=1
            else:
                nums1[p]=nums2[p2]
                p2-=1
            p-=1
        while p2 >= 0:
            nums1[p]=nums2[p2]
            p-=1
            p2-=1

#Contains Duplicate II
def containsNearbyDuplicate(nums, k):
        s=dict()
        for idx,i in enumerate(nums):
            if i not in s:
                s[i]=idx
            else:
                diff=idx-s[i]
                if diff==k:
                    return True
                s[i]=idx
        return False
containsNearbyDuplicate([1,0,1,1],1)

#Summary Ranges
def summaryRanges(nums):
  result=[]
  if not nums:
    return result
  start=0
  for i in range(len(nums)):
    if i==len(nums)-1 or nums[i]+1 != nums[i+1]:
      if start==i:
        result.append(str(nums[start]))
      else:
        result.append("{}->{}".format(nums[start],nums[i]))
      start=i+1
  return result

summaryRanges([0,1,2,4,5,7])

#First Missing Poitive
def firstMissingPositive1(nums):#172/178 test case passed
  for i in range(1,len(nums)+2):
    if i in nums:
      continue
    else:
      return i

def firstMissingPositive(nums):
        nums_set=set(nums)
        for i in range(1,len(nums)+2):
            if i in nums_set:
                continue
            else:
                return i

firstMissingPositive([1])

#Jump Game
def canJump(nums):
  main=0
  for i in range(len(nums)):
    if i > main:
      return False

    main=max(main,i+nums[i])
    if main>=len(nums)-1:
      return True
  return True

canJump([2,3,1,1,4])